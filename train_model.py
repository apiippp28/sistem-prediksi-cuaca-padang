# -*- coding: utf-8 -*-
"""train_model.py (Data Lokal BMKG + Tekanan Udara)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1blYl-crwT1LgIhXqim5vvtSdGQ1uuzdQ
"""

# train_model.py
# Versi final yang disesuaikan untuk membaca file CSV bersih dari BMKG.

import pandas as pd
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
import joblib

print("Memulai proses pelatihan model dengan data lokal BMKG...")

# --- Tahap 1: Memuat Data Training yang Sudah Bersih ---
try:
    # Menggunakan nama file CSV yang sudah bersih.
    file_name = 'laporan_iklim_harian-jan_feb_mar.csv'

    # SOLUSI: Membaca file dengan pemisah titik koma (;) dan desimal koma (,)
    df = pd.read_csv(file_name, delimiter=';', decimal=',')

    # Mengganti nama kolom agar sesuai
    df.rename(columns={
        'TAVG': 'suhu',
        'RH_AVG': 'kelembaban',
        'RR': 'curah_hujan',
        'FF_AVG': 'kecepatan_angin'
    }, inplace=True)
    print(f">>> Berhasil memuat data training dari '{file_name}'. Jumlah baris data: {len(df)}")

except FileNotFoundError:
    print(f"!!! KESALAHAN: File '{file_name}' tidak ditemukan.")
    print("!!! Pastikan Anda sudah mengunggah file CSV yang bersih dengan nama yang benar.")
    df = None

# Blok kode di bawah ini hanya akan berjalan jika df berhasil dibuat (file ditemukan)
if df is not None and not df.empty:
    # --- Penambahan Data Tekanan Udara ---
    pressure_data = [
        94.96, 94.91, 94.93, 94.92, 94.88, 94.97, 94.95, 94.93, 94.93, 95.04,
        95.08, 94.94, 94.89, 94.91, 94.93, 94.89, 94.88, 94.82, 94.74, 94.75,
        94.76, 94.82, 94.82, 94.76, 94.86, 94.83, 94.79, 94.89, 94.96, 94.87,
        94.81, 94.8, 94.83, 94.85, 94.9, 94.88, 94.82, 94.83, 94.83, 94.84,
        94.91, 94.98, 95.03, 95.02, 94.95, 94.93, 94.98, 95.04, 95.06, 95.07,
        94.96, 95.03, 95.08, 95.12, 95.09, 95.15, 95.07, 95.02, 94.92, 94.85,
        94.75, 94.77, 94.79, 94.79, 94.93, 94.91, 94.82, 94.9, 94.95, 94.86,
        94.84, 94.86, 94.95, 94.96, 94.9, 94.94, 95.03, 95.15, 95.21, 95.12,
        95.09, 95.05, 94.95, 94.77, 94.7, 94.71, 94.79, 94.82, 94.93, 94.94
    ]

    if len(pressure_data) == len(df):
        df['tekanan_udara'] = pressure_data
        print(">>> Berhasil menambahkan kolom 'tekanan_udara' ke dataset.")
    else:
        print(f"!!! KESALAHAN: Jumlah data tekanan ({len(pressure_data)}) tidak sama dengan jumlah baris dataset ({len(df)}).")
        df = None # Hentikan proses jika jumlah data tidak cocok

# Lanjutkan hanya jika df masih valid
if df is not None and not df.empty:
    # --- Tahap 2: Membuat Label Target (Feature Engineering) ---
    def tentukan_cuaca(curah_hujan):
        # Mengonversi ke tipe data numerik dan menangani nilai non-numerik
        try:
            curah_hujan = float(curah_hujan)
        except (ValueError, TypeError):
            return 'Lainnya' # Label untuk data yang tidak valid

        if curah_hujan == 0:
            return 'Cerah'
        elif curah_hujan > 0 and curah_hujan < 1:
            return 'Berawan'
        elif curah_hujan >= 1 and curah_hujan < 15:
            return 'Hujan'
        else:
            return 'Hujan Deras'

    df['Cuaca'] = df['curah_hujan'].apply(tentukan_cuaca)
    # Menghapus baris dengan data yang tidak valid
    df = df[df.Cuaca != 'Lainnya']

    print(">>> Berhasil membuat label kategori cuaca dari data curah hujan.")
    print("\nDistribusi Data pada Setiap Kelas Cuaca:")
    print(df['Cuaca'].value_counts())

    # --- Tahap 3: Persiapan untuk Machine Learning ---
    fitur = ['suhu', 'kelembaban', 'kecepatan_angin', 'tekanan_udara']
    # Mengonversi semua kolom fitur ke tipe data numerik
    for col in fitur:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    df.dropna(subset=fitur, inplace=True) # Hapus baris jika ada nilai non-numerik di fitur

    X = df[fitur]
    y = df['Cuaca']

    le = LabelEncoder()
    y_encoded = le.fit_transform(y)
    joblib.dump(le, 'label_encoder.pkl')
    print(f"\n>>> Label encoder disimpan. Kelas: {le.classes_}")

    # --- Tahap 4: Pelatihan Model Decision Tree ---
    params = {
        'criterion': ['gini', 'entropy'],
        'max_depth': [3, 4, 5, 6, 7, 8],
        'min_samples_split': [2, 3, 4, 5],
        'min_samples_leaf': [1, 2, 3, 4]
    }

    clf = DecisionTreeClassifier(random_state=42)
    grid_search = GridSearchCV(estimator=clf, param_grid=params, cv=5, n_jobs=-1, verbose=1)
    grid_search.fit(X, y_encoded)
    best_model = grid_search.best_estimator_

    # --- Tahap 5: Menyimpan Model Final ---
    print(f"\n>>> Model terbaik ditemukan dengan parameter: {grid_search.best_params_}")
    print(f">>> Akurasi terbaik pada data validasi: {grid_search.best_score_:.2f}")
    joblib.dump(best_model, 'weather_model.pkl')
    print("\n>>> Pelatihan Selesai. Model 'weather_model.pkl' siap untuk di-deploy.")